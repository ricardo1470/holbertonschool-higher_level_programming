==========================
The ``add_integer`` module
==========================

---------------------
Using ``add_integer``
---------------------

import the add_integer module.
>>> add_integer = __import__('0-add_integer').add_integer

add positive and negative number
>>> add_integer(20, -80)
-60

---------------------
Using ``add_float``
---------------------
add integer and float number
>>> add_integer(-56, -9.0)
-65

add two positive floats
>>> add_integer(7.5, 98.5)
105

---------------------
Using ``add_string`` and ``add_integer`` 
---------------------
add string and positive
>>> add_integer("8", 10)
Traceback (most recent call last):
TypeError: a must be an integer

---------------------
Using ``add_string`` and ``add_integer`` 
---------------------
add, passing two None variables
>>> add_integer(None, None)
Traceback (most recent call last):
TypeError: a must be an integer

add, passing only one parameter like string
>>> add_integer("poooxfgs")
Traceback (most recent call last):
TypeError: a must be an integer

add, passing only b like string
>>> add_integer("rosca", 000)
Traceback (most recent call last):
TypeError: a must be an integer

add, passing only floats
>>> add_integer(float(13), float(5))
18

missing two args
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

missing one arg
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

missing one arg
>>> add_integer(1, None)
Traceback (most recent call last):
TypeError: b must be an integer

infinity convert
>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

NaN number
>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
